{"ast":null,"code":"//import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { Sweetalert } from '../../functions';\nimport { UsersModel } from '../../models/users.model';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/users.service\";\nimport * as i2 from \"@angular/router\";\n\nfunction LoginComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(usersService, activatedRoute) {\n      this.usersService = usersService;\n      this.activatedRoute = activatedRoute;\n      this.rememberMe = false;\n      this.user = new UsersModel();\n    }\n\n    ngOnInit() {\n      /*=============================================\r\n          Validar acción de recordar credencial de correo\r\n          =============================================*/\n      if (localStorage.getItem(\"rememberMe\") && localStorage.getItem(\"rememberMe\") == \"yes\") {\n        this.user.email = localStorage.getItem(\"email\");\n        this.rememberMe = true;\n      }\n      /*=============================================\r\n      Validar formulario de Bootstrap 4\r\n      =============================================*/\n      // Disable form submissions if there are invalid fields\n\n\n      (function () {\n        'use strict';\n\n        window.addEventListener('load', function () {\n          // Get the forms we want to add validation styles to\n          var forms = document.getElementsByClassName('needs-validation'); // Loop over them and prevent submission\n\n          var validation = Array.prototype.filter.call(forms, function (form) {\n            form.addEventListener('submit', function (event) {\n              if (form.checkValidity() === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n\n              form.classList.add('was-validated');\n            }, false);\n          });\n        }, false);\n      })();\n      /*=============================================\r\n      Verificar cuenta de correo electrónico\r\n      =============================================*/\n\n\n      if (this.activatedRoute.snapshot.queryParams[\"oobCode\"] != undefined && this.activatedRoute.snapshot.queryParams[\"mode\"] == \"verifyEmail\") {\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"]\n        };\n        this.usersService.confirmEmailVerificationFnc(body).subscribe(resp => {\n          if (resp[\"emailVerified\"]) {\n            /*=============================================\r\n            Actualizar Confirmación de correo en Database\r\n            =============================================*/\n            this.usersService.getFilterData(\"email\", resp[\"email\"]).subscribe(resp => {\n              for (const i in resp) {\n                let id = Object.keys(resp).toString();\n                let value = {\n                  needConfirm: true\n                };\n                this.usersService.patchData(id, value).subscribe(resp => {\n                  if (resp[\"needConfirm\"]) {\n                    Sweetalert.fnc(\"success\", \"¡Email confirm, login now!\", \"login\");\n                  }\n                });\n              }\n            });\n          }\n        }, err => {\n          if (err.error.error.message == \"INVALID_OOB_CODE\") {\n            Sweetalert.fnc(\"error\", \"The email has already been confirmed\", \"login\");\n          }\n        });\n      }\n      /*=============================================\r\n      Confirmar cambio de contraseña\r\n      =============================================*/\n\n\n      if (this.activatedRoute.snapshot.queryParams[\"oobCode\"] != undefined && this.activatedRoute.snapshot.queryParams[\"mode\"] == \"resetPassword\") {\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"]\n        };\n        this.usersService.verifyPasswordResetCodeFnc(body).subscribe(resp => {\n          if (resp[\"requestType\"] == \"PASSWORD_RESET\") {\n            $(\"#newPassword\").modal();\n          }\n        });\n      }\n    }\n    /*=============================================\r\n    Validación de expresión regular del formulario\r\n    =============================================*/\n\n\n    validate(input) {\n      let pattern;\n\n      if ($(input).attr(\"name\") == \"password\") {\n        pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,}$/;\n      }\n\n      if (!pattern.test(input.value)) {\n        $(input).parent().addClass('was-validated');\n        input.value = \"\";\n      }\n    }\n    /*=============================================\r\n    Envío del formulario\r\n    =============================================*/\n\n\n    onSubmit(f) {\n      if (f.invalid) {\n        return;\n      }\n      /*=============================================\r\n      Alerta suave mientras se registra el usuario\r\n      =============================================*/\n\n\n      Sweetalert.fnc(\"loading\", \"Loading...\", null);\n      /*=============================================\r\n      Validar que el correo esté verificado\r\n      =============================================*/\n\n      this.usersService.getFilterData(\"email\", this.user.email).subscribe(resp1 => {\n        for (const i in resp1) {\n          if (resp1[i].needConfirm) {\n            /*=============================================\r\n            Login en Firebase Authentication\r\n            =============================================*/\n            this.user.returnSecureToken = true;\n            this.usersService.loginAuth(this.user).subscribe(resp2 => {\n              /*=============================================\r\n              Almacenar id Token en Firebase Database\r\n              =============================================*/\n              let id = Object.keys(resp1).toString();\n              let value = {\n                idToken: resp2[\"idToken\"]\n              };\n              this.usersService.patchData(id, value).subscribe(resp3 => {\n                if (resp3[\"idToken\"] != \"\") {\n                  Sweetalert.fnc(\"close\", null, null);\n                  /*=============================================\r\n                  Almacenamos el Token de seguridad en el localstorage\r\n                  =============================================*/\n\n                  localStorage.setItem(\"idToken\", resp3[\"idToken\"]);\n                  /*=============================================\r\n                  Almacenamos el email en el localstorage\r\n                  =============================================*/\n\n                  localStorage.setItem(\"email\", resp2[\"email\"]);\n                  /*=============================================\r\n                  Almacenamos la fecha de expiración localstorage\r\n                  =============================================*/\n\n                  let today = new Date();\n                  today.setSeconds(resp2[\"expiresIn\"]);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\r\n                  Almacenamos recordar email en el localStorage\r\n                  =============================================*/\n\n                  if (this.rememberMe) {\n                    localStorage.setItem(\"rememberMe\", \"yes\");\n                  } else {\n                    localStorage.setItem(\"rememberMe\", \"no\");\n                  }\n                  /*=============================================\r\n                  Redireccionar al usuario a la página de su cuenta\r\n                  =============================================*/\n\n\n                  window.open(\"account\", \"_top\");\n                }\n              });\n            }, err => {\n              Sweetalert.fnc(\"error\", err.error.error.message, null);\n            });\n          } else {\n            Sweetalert.fnc(\"error\", 'Need Confirm your email', null);\n          }\n        }\n      });\n    }\n    /*=============================================\r\n    Enviar solicitud para recuperar Contraseña\r\n    =============================================*/\n\n\n    resetPassword(value) {\n      Sweetalert.fnc(\"loading\", \"Loading...\", null);\n      let body = {\n        requestType: \"PASSWORD_RESET\",\n        email: value\n      };\n      this.usersService.sendPasswordResetEmailFnc(body).subscribe(resp => {\n        if (resp[\"email\"] == value) {\n          Sweetalert.fnc(\"success\", \"Check your email to change the password\", \"login\");\n        }\n      });\n    }\n    /*=============================================\r\n    Enviar nueva Contraseña\r\n    =============================================*/\n\n\n    newPassword(value) {\n      if (value != \"\") {\n        Sweetalert.fnc(\"loading\", \"Loading...\", null);\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"],\n          newPassword: value\n        };\n        this.usersService.confirmPasswordResetFnc(body).subscribe(resp => {\n          if (resp[\"requestType\"] == \"PASSWORD_RESET\") {\n            Sweetalert.fnc(\"success\", \"Password change successful, login now\", \"login\");\n          }\n        });\n      }\n    }\n    /*=============================================\r\n    Login con Facebook\r\n    =============================================*/\n\n\n    facebookLogin() {\n      let localUsersService = this.usersService;\n      let localUser = this.user; // https://firebase.google.com/docs/web/setup\n      // Crea una nueva APP en Settings\n      // npm install --save firebase\n      // Agregar import * as firebase from \"firebase/app\";\n      // import \"firebase/auth\";\n\n      /*=============================================\r\n      Inicializa Firebase en tu proyecto web\r\n      =============================================*/\n      // Your web app's Firebase configuration\n\n      const firebaseConfig = {\n        apiKey: \"AIzaSyBLzvJWNmftupZrSGNonM9phQAQU89arac\",\n        authDomain: \"myterry-35c54.firebaseapp.com\",\n        databaseURL: \"https://myterry-35c54.firebaseio.com\",\n        projectId: \"myterry-35c54\",\n        storageBucket: \"myterry-35c54.appspot.com\",\n        messagingSenderId: \"152736898252\",\n        appId: \"1:152736898252:web:79bfa5038d88e2579b7669\",\n        measurementId: \"G-558RF00GLX\"\n      }; // Initialize Firebase\n\n      firebase.initializeApp(firebaseConfig); //https://firebase.google.com/docs/auth/web/facebook-login\n\n      /*=============================================\r\n      Crea una instancia del objeto proveedor de Facebook\r\n      =============================================*/\n\n      var provider = new firebase.auth.FacebookAuthProvider();\n      /*=============================================\r\n      acceder con una ventana emergente y con certificado SSL (https)\r\n      =============================================*/\n      //ng serve --ssl true --ssl-cert \"/path/to/file.crt\" --ssl-key \"/path/to/file.key\"\n\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        loginFirebaseDatabase(result, localUser, localUsersService);\n      }).catch(function (error) {\n        var errorMessage = error.message;\n        Sweetalert.fnc(\"error\", errorMessage, \"login\");\n      });\n      /*=============================================\r\n      Registramos al usuario en Firebase Database\r\n      =============================================*/\n\n      function loginFirebaseDatabase(result, localUser, localUsersService) {\n        var user = result.user;\n\n        if (user.P) {\n          localUsersService.getFilterData(\"email\", user.email).subscribe(resp => {\n            if (Object.keys(resp).length > 0) {\n              if (resp[Object.keys(resp)[0]].method == \"facebook\") {\n                /*=============================================\r\n                Actualizamos el idToken en Firebase\r\n                =============================================*/\n                let id = Object.keys(resp).toString();\n                let body = {\n                  idToken: user.b.b.g\n                };\n                localUsersService.patchData(id, body).subscribe(resp => {\n                  /*=============================================\r\n                  Almacenamos el Token de seguridad en el localstorage\r\n                  =============================================*/\n                  localStorage.setItem(\"idToken\", user.b.b.g);\n                  /*=============================================\r\n                  Almacenamos el email en el localstorage\r\n                  =============================================*/\n\n                  localStorage.setItem(\"email\", user.email);\n                  /*=============================================\r\n                  Almacenamos la fecha de expiración localstorage\r\n                  =============================================*/\n\n                  let today = new Date();\n                  today.setSeconds(3600);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\r\n                  Redireccionar al usuario a la página de su cuenta\r\n                  =============================================*/\n\n                  window.open(\"account\", \"_top\");\n                });\n              } else {\n                Sweetalert.fnc(\"error\", `You're already signed in, please login with ${resp[Object.keys(resp)[0]].method} method`, \"login\");\n              }\n            } else {\n              Sweetalert.fnc(\"error\", \"This account is not registered\", \"register\");\n            }\n          });\n        }\n      }\n    }\n    /*=============================================\r\n    Login con Google\r\n    =============================================*/\n\n\n    googleLogin() {\n      let localUsersService = this.usersService;\n      let localUser = this.user; // https://firebase.google.com/docs/web/setup\n      // Crea una nueva APP en Settings\n      // npm install --save firebase\n      // Agregar import * as firebase from \"firebase/app\";\n      // import \"firebase/auth\";\n\n      /*=============================================\r\n      Inicializa Firebase en tu proyecto web\r\n      =============================================*/\n      // Your web app's Firebase configuration\n\n      const firebaseConfig = {\n        apiKey: \"AIzaSyBLzvJWNmftupZrSGNonM9phQAQU89arac\",\n        authDomain: \"myterry-35c54.firebaseapp.com\",\n        databaseURL: \"https://myterry-35c54.firebaseio.com\",\n        projectId: \"myterry-35c54\",\n        storageBucket: \"myterry-35c54.appspot.com\",\n        messagingSenderId: \"152736898252\",\n        appId: \"1:152736898252:web:79bfa5038d88e2579b7669\",\n        measurementId: \"G-558RF00GLX\"\n      }; // Initialize Firebase\n\n      firebase.initializeApp(firebaseConfig); //https://firebase.google.com/docs/auth/web/facebook-login\n\n      /*=============================================\r\n      Crea una instancia del objeto proveedor de Google\r\n      =============================================*/\n\n      var provider = new firebase.auth.GoogleAuthProvider();\n      /*=============================================\r\n      acceder con una ventana emergente\r\n      =============================================*/\n\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        loginFirebaseDatabase(result, localUser, localUsersService);\n      }).catch(function (error) {\n        var errorMessage = error.message;\n        Sweetalert.fnc(\"error\", errorMessage, \"login\");\n      });\n      /*=============================================\r\n      Registramos al usuario en Firebase Database\r\n      =============================================*/\n\n      function loginFirebaseDatabase(result, localUser, localUsersService) {\n        var user = result.user;\n\n        if (user.P) {\n          localUsersService.getFilterData(\"email\", user.email).subscribe(resp => {\n            if (Object.keys(resp).length > 0) {\n              if (resp[Object.keys(resp)[0]].method == \"google\") {\n                /*=============================================\r\n                Actualizamos el idToken en Firebase\r\n                =============================================*/\n                let id = Object.keys(resp).toString();\n                let body = {\n                  idToken: user.b.b.g\n                };\n                localUsersService.patchData(id, body).subscribe(resp => {\n                  /*=============================================\r\n                  Almacenamos el Token de seguridad en el localstorage\r\n                  =============================================*/\n                  localStorage.setItem(\"idToken\", user.b.b.g);\n                  /*=============================================\r\n                  Almacenamos el email en el localstorage\r\n                  =============================================*/\n\n                  localStorage.setItem(\"email\", user.email);\n                  /*=============================================\r\n                  Almacenamos la fecha de expiración localstorage\r\n                  =============================================*/\n\n                  let today = new Date();\n                  today.setSeconds(3600);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\r\n                  Redireccionar al usuario a la página de su cuenta\r\n                  =============================================*/\n\n                  window.open(\"account\", \"_top\");\n                });\n              } else {\n                Sweetalert.fnc(\"error\", `You're already signed in, please login with ${resp[Object.keys(resp)[0]].method} method`, \"login\");\n              }\n            } else {\n              Sweetalert.fnc(\"error\", \"This account is not registered\", \"register\");\n            }\n          });\n        }\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UsersService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 102,\n    vars: 5,\n    consts: [[1, \"ps-breadcrumb\"], [1, \"container\"], [1, \"breadcrumb\"], [\"href\", \"index.html\"], [1, \"ps-my-account\"], [\"novalidate\", \"\", 1, \"ps-form--account\", \"ps-tab-root\", \"needs-validation\", 3, \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"ps-tab-list\"], [1, \"active\"], [\"href\", \"login\"], [1, \"\"], [\"href\", \"register\"], [1, \"ps-tabs\"], [\"id\", \"sign-in\", 1, \"ps-tab\", \"active\"], [1, \"ps-form__content\"], [1, \"form-group\"], [\"type\", \"text\", \"placeholder\", \"Email address\", \"name\", \"email\", \"email\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"valid-feedback\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"form-group\", \"form-forgot\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"href\", \"#resetPassword\", \"data-toggle\", \"modal\"], [1, \"ps-checkbox\"], [\"type\", \"checkbox\", \"id\", \"remember-me\", \"name\", \"remember-me\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"remember-me\"], [1, \"form-group\", \"submtit\"], [1, \"ps-btn\", \"ps-btn--fullwidth\"], [1, \"ps-form__footer\"], [1, \"ps-list--social\"], [1, \"facebook\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fab\", \"fa-facebook-f\"], [1, \"google\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fab\", \"fa-google\"], [\"id\", \"resetPassword\", 1, \"modal\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"close\"], [1, \"modal-body\"], [\"novalidate\", \"\", 1, \"ps-form--account\", \"ps-tab-root\", \"needs-validation\"], [\"type\", \"email\", \"placeholder\", \"Input your email address\", \"name\", \"email\", \"email\", \"\", \"required\", \"\", 1, \"form-control\"], [\"email\", \"\"], [1, \"invalid-feedback\"], [\"type\", \"button\", 1, \"ps-btn\", \"ps-btn--fullwidth\", 3, \"click\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-danger\"], [\"id\", \"newPassword\", 1, \"modal\"], [\"type\", \"password\", \"placeholder\", \"Input your new password\", \"name\", \"password\", \"minlength\", \"4\", \"pattern\", \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,}\", \"data-toggle\", \"tooltip\", \"title\", \"Enter your password with at least 4 characters and must include uppercase, lowercase letters and numbers\", \"required\", \"\", 1, \"form-control\", 3, \"change\"], [\"password\", \"\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r5 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ul\", 2)(3, \"li\")(4, \"a\", 3);\n        i0.ɵɵtext(5, \"Home\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"Login\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 1)(10, \"form\", 5, 6);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          i0.ɵɵrestoreView(_r5);\n\n          const _r0 = i0.ɵɵreference(11);\n\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(12, \"ul\", 7)(13, \"li\", 8)(14, \"p\")(15, \"a\", 9);\n        i0.ɵɵtext(16, \"Login\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(17, \"li\", 10)(18, \"p\")(19, \"a\", 11);\n        i0.ɵɵtext(20, \"Register\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(21, \"div\", 12)(22, \"div\", 13)(23, \"div\", 14)(24, \"h5\");\n        i0.ɵɵtext(25, \"Log In Your Account\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 15)(27, \"input\", 16);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_27_listener($event) {\n          return ctx.user.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 17);\n        i0.ɵɵtext(29, \"Valid.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(30, LoginComponent_div_30_Template, 2, 0, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 19)(32, \"input\", 20);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_32_listener($event) {\n          return ctx.user.password = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 17);\n        i0.ɵɵtext(34, \"Valid.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(35, LoginComponent_div_35_Template, 2, 0, \"div\", 18);\n        i0.ɵɵelementStart(36, \"a\", 21);\n        i0.ɵɵtext(37, \"Forgot?\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"div\", 15)(39, \"div\", 22)(40, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_40_listener($event) {\n          return ctx.rememberMe = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"label\", 24);\n        i0.ɵɵtext(42, \"Remember me\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(43, \"div\", 25)(44, \"button\", 26);\n        i0.ɵɵtext(45, \"Login\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"div\", 27)(47, \"p\");\n        i0.ɵɵtext(48, \"Connect with:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"ul\", 28)(50, \"li\")(51, \"a\", 29);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_a_click_51_listener() {\n          return ctx.facebookLogin();\n        });\n        i0.ɵɵelement(52, \"i\", 30);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(53, \"li\")(54, \"a\", 31);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_a_click_54_listener() {\n          return ctx.googleLogin();\n        });\n        i0.ɵɵelement(55, \"i\", 32);\n        i0.ɵɵelementEnd()()()()()()()()();\n        i0.ɵɵelementStart(56, \"div\", 33)(57, \"div\", 34)(58, \"div\", 35)(59, \"div\", 36)(60, \"h4\", 37);\n        i0.ɵɵtext(61, \"Reset Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"button\", 38);\n        i0.ɵɵtext(63, \"\\u00D7\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(64, \"div\", 39)(65, \"form\", 40)(66, \"div\", 15);\n        i0.ɵɵelement(67, \"input\", 41, 42);\n        i0.ɵɵelementStart(69, \"div\", 17);\n        i0.ɵɵtext(70, \"Valid.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(71, \"div\", 43);\n        i0.ɵɵtext(72, \"Please fill in this field correctly.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(73, \"div\", 25)(74, \"button\", 44);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_74_listener() {\n          i0.ɵɵrestoreView(_r5);\n\n          const _r3 = i0.ɵɵreference(68);\n\n          return i0.ɵɵresetView(ctx.resetPassword(_r3.value));\n        });\n        i0.ɵɵtext(75, \"Submit\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(76, \"div\", 45)(77, \"button\", 46);\n        i0.ɵɵtext(78, \"Close\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(79, \"div\", 47)(80, \"div\", 34)(81, \"div\", 35)(82, \"div\", 36)(83, \"h4\", 37);\n        i0.ɵɵtext(84, \"New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(85, \"button\", 38);\n        i0.ɵɵtext(86, \"\\u00D7\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(87, \"div\", 39)(88, \"form\", 40)(89, \"div\", 15)(90, \"input\", 48, 49);\n        i0.ɵɵlistener(\"change\", function LoginComponent_Template_input_change_90_listener() {\n          i0.ɵɵrestoreView(_r5);\n\n          const _r4 = i0.ɵɵreference(91);\n\n          return i0.ɵɵresetView(ctx.validate(_r4));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(92, \"div\", 17);\n        i0.ɵɵtext(93, \"Valid.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(94, \"div\", 43);\n        i0.ɵɵtext(95, \"Please fill in this field correctly.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(96, \"div\", 25)(97, \"button\", 44);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_97_listener() {\n          i0.ɵɵrestoreView(_r5);\n\n          const _r4 = i0.ɵɵreference(91);\n\n          return i0.ɵɵresetView(ctx.newPassword(_r4.value));\n        });\n        i0.ɵɵtext(98, \"Submit\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(99, \"div\", 45)(100, \"button\", 46);\n        i0.ɵɵtext(101, \"Close\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(11);\n\n        i0.ɵɵadvance(27);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.email);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", _r0.submitted && _r0.controls[\"email\"].errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.password);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", _r0.submitted && _r0.controls[\"password\"].errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.rememberMe);\n      }\n    }\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}