{"ast":null,"code":"import { Api, Register, Login, SendEmailVerification, ConfirmEmailVerification, GetUserData, SendPasswordResetEmail, VerifyPasswordResetCode, ConfirmPasswordReset, ChangePassword } from '../config';\nimport { Sweetalert } from '../functions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService {\n    constructor(http) {\n      this.http = http;\n      this.api = Api.url;\n      this.register = Register.url;\n      this.login = Login.url;\n      this.sendEmailVerification = SendEmailVerification.url;\n      this.confirmEmailVerification = ConfirmEmailVerification.url;\n      this.getUserData = GetUserData.url;\n      this.sendPasswordResetEmail = SendPasswordResetEmail.url;\n      this.verifyPasswordResetCode = VerifyPasswordResetCode.url;\n      this.confirmPasswordReset = ConfirmPasswordReset.url;\n      this.changePassword = ChangePassword.url;\n    }\n    /*=============================================\r\n      Registro en Firebase Authentication\r\n      =============================================*/\n\n\n    registerAuth(user) {\n      return this.http.post(`${this.register}`, user);\n    }\n    /*=============================================\r\n    Registro en Firebase Database\r\n    =============================================*/\n\n\n    registerDatabase(user) {\n      delete user.first_name;\n      delete user.last_name;\n      delete user.password;\n      delete user.returnSecureToken;\n      return this.http.post(`${this.api}/users.json`, user);\n    }\n    /*=============================================\r\n    Filtrar data para buscar coincidencias\r\n    =============================================*/\n\n\n    getFilterData(orderBy, equalTo) {\n      return this.http.get(`${this.api}users.json?orderBy=\"${orderBy}\"&equalTo=\"${equalTo}\"&print=pretty`);\n    }\n    /*=============================================\r\n    Login en Firebase Authentication\r\n    =============================================*/\n\n\n    loginAuth(user) {\n      return this.http.post(`${this.login}`, user);\n    }\n    /*=============================================\r\n    Enviar verificación de correo electrónico\r\n    =============================================*/\n\n\n    sendEmailVerificationFnc(body) {\n      return this.http.post(`${this.sendEmailVerification}`, body);\n    }\n    /*=============================================\r\n    Confirmar email de verificación\r\n    =============================================*/\n\n\n    confirmEmailVerificationFnc(body) {\n      return this.http.post(`${this.confirmEmailVerification}`, body);\n    }\n    /*=============================================\r\n    Actualizar data de usuario\r\n    =============================================*/\n\n\n    patchData(id, value) {\n      return this.http.patch(`${this.api}users/${id}.json`, value);\n    }\n    /*=============================================\r\n    Validar idToken de Autenticación\r\n    =============================================*/\n\n\n    authActivate() {\n      return new Promise(resolve => {\n        /*=============================================\r\n        Validamos que el idToken sea real\r\n        =============================================*/\n        if (localStorage.getItem(\"idToken\")) {\n          let body = {\n            idToken: localStorage.getItem(\"idToken\")\n          };\n          this.http.post(`${this.getUserData}`, body).subscribe(resp => {\n            /*=============================================\r\n            Validamos fecha de expiración\r\n            =============================================*/\n            if (localStorage.getItem(\"expiresIn\")) {\n              let expiresIn = Number(localStorage.getItem(\"expiresIn\"));\n              let expiresDate = new Date();\n              expiresDate.setTime(expiresIn);\n\n              if (expiresDate > new Date()) {\n                resolve(true);\n              } else {\n                localStorage.removeItem('idToken');\n                localStorage.removeItem('expiresIn');\n                resolve(false);\n              }\n            } else {\n              localStorage.removeItem('idToken');\n              localStorage.removeItem('expiresIn');\n              resolve(false);\n            }\n          }, err => {\n            localStorage.removeItem('idToken');\n            localStorage.removeItem('expiresIn');\n            resolve(false);\n          });\n        } else {\n          localStorage.removeItem('idToken');\n          localStorage.removeItem('expiresIn');\n          resolve(false);\n        }\n      });\n    }\n    /*=============================================\r\n    Resetear la contraseña\r\n    =============================================*/\n\n\n    sendPasswordResetEmailFnc(body) {\n      return this.http.post(`${this.sendPasswordResetEmail}`, body);\n    }\n    /*=============================================\r\n    Confirmar el cambio de la contraseña\r\n    =============================================*/\n\n\n    verifyPasswordResetCodeFnc(body) {\n      return this.http.post(`${this.verifyPasswordResetCode}`, body);\n    }\n    /*=============================================\r\n    Enviar la contraseña\r\n    =============================================*/\n\n\n    confirmPasswordResetFnc(body) {\n      return this.http.post(`${this.confirmPasswordReset}`, body);\n    }\n    /*=============================================\r\n    Cambiar la contraseña\r\n    =============================================*/\n\n\n    changePasswordFnc(body) {\n      return this.http.post(`${this.changePassword}`, body);\n    }\n    /*=============================================\r\n    Tomar información de un solo usuario\r\n    =============================================*/\n\n\n    getUniqueData(value) {\n      return this.http.get(`${this.api}users/${value}.json`);\n    }\n    /*=============================================\r\n    Función para agregar productos a la lista de deseos\r\n    =============================================*/\n\n\n    addWishlist(product) {\n      /*=============================================\r\n      Validamos que el usuario esté autenticado\r\n      =============================================*/\n      this.authActivate().then(resp => {\n        if (!resp) {\n          Sweetalert.fnc(\"error\", \"The user must be logged in\", null);\n          return;\n        } else {\n          /*=============================================\r\n          Traemos la lista de deseos que ya tenga el usuario\r\n          =============================================*/\n          this.getFilterData(\"idToken\", localStorage.getItem(\"idToken\")).subscribe(resp => {\n            /*=============================================\r\n            Capturamos el id del usuario\r\n            =============================================*/\n            let id = Object.keys(resp).toString();\n\n            for (const i in resp) {\n              /*=============================================\r\n              Pregutnamos si existe una lista de deseos\r\n              =============================================*/\n              if (resp[i].wishlist != undefined) {\n                let wishlist = JSON.parse(resp[i].wishlist);\n                let length = 0;\n                /*=============================================\r\n                Pregutnamos si existe un producto en la lista de deseos\r\n                =============================================*/\n\n                if (wishlist.length > 0) {\n                  wishlist.forEach((list, index) => {\n                    if (list == product) {\n                      length--;\n                    } else {\n                      length++;\n                    }\n                  });\n                  /*=============================================\r\n                  Preguntamos si no ha agregado este producto a la lista de deseos anteriormente\r\n                  =============================================*/\n\n                  if (length != wishlist.length) {\n                    Sweetalert.fnc(\"error\", \"It already exists on your wishlist\", null);\n                  } else {\n                    wishlist.push(product);\n                    let body = {\n                      wishlist: JSON.stringify(wishlist)\n                    };\n                    this.patchData(id, body).subscribe(resp => {\n                      if (resp[\"wishlist\"] != \"\") {\n                        let totalWishlist = Number($(\".totalWishlist\").html());\n                        $(\".totalWishlist\").html(totalWishlist + 1);\n                        Sweetalert.fnc(\"success\", \"Product added to wishlist\", null);\n                      }\n                    });\n                  }\n                } else {\n                  wishlist.push(product);\n                  let body = {\n                    wishlist: JSON.stringify(wishlist)\n                  };\n                  this.patchData(id, body).subscribe(resp => {\n                    if (resp[\"wishlist\"] != \"\") {\n                      let totalWishlist = Number($(\".totalWishlist\").html());\n                      $(\".totalWishlist\").html(totalWishlist + 1);\n                      Sweetalert.fnc(\"success\", \"Product added to wishlist\", null);\n                    }\n                  });\n                }\n                /*=============================================\r\n                Cuando no exista lista de deseos inicialmente\r\n                =============================================*/\n\n              } else {\n                let body = {\n                  wishlist: `[\"${product}\"]`\n                };\n                this.patchData(id, body).subscribe(resp => {\n                  if (resp[\"wishlist\"] != \"\") {\n                    let totalWishlist = Number($(\".totalWishlist\").html());\n                    $(\".totalWishlist\").html(totalWishlist + 1);\n                    Sweetalert.fnc(\"success\", \"Product added to wishlist\", null);\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n\n  }\n\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module"}